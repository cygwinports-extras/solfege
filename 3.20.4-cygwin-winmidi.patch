--- origsrc/solfege-3.20.4/solfege/configwindow.py	2011-10-21 08:33:26.000000000 -0500
+++ src/solfege-3.20.4/solfege/configwindow.py	2011-10-24 00:43:33.137707000 -0500
@@ -45,7 +45,7 @@ except ImportError:
     solfege.soundcard.alsa_sequencer = None
 
 
-if sys.platform == 'win32':
+if sys.platform == 'win32' or sys.platform == 'cygwin':
     try:
         from solfege.soundcard import winmidi
     except ImportError, e:
@@ -492,7 +492,7 @@ class ConfigWindow(gtk.Dialog, cfg.Confi
         self.g_expert_mode.connect('toggled', solfege.app.reset_exercise)
         page_vbox.pack_start(self.g_expert_mode, False)
     def create_sound_config(self):
-        if sys.platform == 'win32':
+        if sys.platform == 'win32' or sys.platform == 'cygwin':
             self.create_win32_sound_page()
         else:
             self.create_linux_sound_page()
@@ -808,7 +808,7 @@ class ConfigWindow(gtk.Dialog, cfg.Confi
             soundcard.synth.error_report_cb = solfege.win.display_error_message
         elif self.g_device_radio.get_active():
             try:
-                if sys.platform == 'win32':
+                if sys.platform == 'win32' or sys.platform == 'cygwin':
                     soundcard.initialise_winsynth(self.g_synth.get_active() - 1)
                 else:
                     soundcard.initialise_devicefile(
@@ -843,13 +843,13 @@ class ConfigWindow(gtk.Dialog, cfg.Confi
         else:
             assert self.g_fakesynth_radio.get_active()
             self.set_string("sound/type", "fake-synth")
-        if sys.platform != 'win32':
+        if sys.platform != 'win32' and sys.platform != 'cygwin':
             self.set_string("sound/device_file", self.g_device_file.child.get_text())
         if soundcard.synth.m_type_major in ('OSS', 'win32'):
             self.set_int("sound/synth_number", soundcard.synth.m_devnum)
             # we set the spin just in case m_devnum was changed by the
             # soundcard setup code, if it was out of range
-            if sys.platform != 'win32':
+            if sys.platform != 'win32' and sys.platform != 'cygwin':
                 self.g_synth_num.set_value(soundcard.synth.m_devnum)
             else:
                 self.g_synth.set_active(soundcard.synth.m_devnum + 1)
--- origsrc/solfege-3.20.4/solfege/soundcard/Makefile	2011-10-21 08:33:26.000000000 -0500
+++ src/solfege-3.20.4/solfege/soundcard/Makefile	2011-10-24 00:50:24.847109900 -0500
@@ -64,12 +64,15 @@ solfege/soundcard/solfege_c_midi_wrap.c:
 # win32
 
 ifeq ($(ENABLE_WINMIDI),yes)
-TARGETS += solfege/soundcard/winmidi.pyd
+TARGETS += solfege/soundcard/winmidi.dll
 endif
 
 PYDLL=win32/bin/python25.dll
 DLLWRAP=dllwrap
 
+%/winmidi.dll: %/winmidi.o
+	$(CC) $(LDFLAGS) -shared -o $@ $< -lpython2.7 -lwinmm
+
 %/winmidi.pyd: %/winmidi.o
 	$(DLLWRAP) --dllname=$@ --def=solfege/soundcard/winmidi.def $< -o $@ -s --entry=_DllMain@12 -L/usr/i586-mingw32msvc/lib/ -lwinmm $(PYDLL)
 
@@ -88,6 +91,9 @@ ifdef SWIG
 	$(INSTALL_DATA) solfege/soundcard/_solfege_c_midi.so $(DESTDIR)/$(libdir)/$(PACKAGE)/
   endif
 endif
+else
+	mkdir -p $(DESTDIR)/$(datadir)/$(PACKAGE)/solfege/soundcard/
+	$(INSTALL) solfege/soundcard/winmidi.dll $(DESTDIR)$(datadir)/$(PACKAGE)/solfege/soundcard/
 endif
 
 uninstall-soundcard:
--- origsrc/solfege-3.20.4/solfege/soundcard/winmidi.c	2011-10-21 08:33:26.000000000 -0500
+++ src/solfege-3.20.4/solfege/soundcard/winmidi.c	2011-10-24 00:50:46.063146900 -0500
@@ -40,7 +40,7 @@
 
 #include <mmsystem.h>
 
-#include <python.h>
+#include <Python.h>
 //#include <stdio.h>
 //#include <string.h>
 //#include <stdlib.h>
@@ -134,7 +134,7 @@ static void s_SetMidiError(const char *r
 }
 
 
-static void FAR PASCAL s_MidiCallback(HMIDISTRM hms, UINT uMsg, DWORD dwUser, DWORD dw1, DWORD dw2) {
+static void FAR PASCAL s_MidiCallback(HMIDISTRM hms, UINT uMsg, DWORD_PTR dwUser, DWORD_PTR dw1, DWORD_PTR dw2) {
 	WinmidiObject *obj = (WinmidiObject *) dwUser;
 	int retVal;
 
@@ -299,7 +299,7 @@ int s_ResetMidiStream(WinmidiObject *obj
 	}
 
 	retVal = midiStreamOpen(&(obj->m_midiOut), &devNum, 1,
-		(DWORD) s_MidiCallback, (DWORD) obj, CALLBACK_FUNCTION); //lint !e620
+		(DWORD_PTR) s_MidiCallback, (DWORD_PTR) obj, CALLBACK_FUNCTION); //lint !e620
 	if(retVal != MMSYSERR_NOERROR) {
 	s_SetMidiError("opening a MIDI stream", retVal);
 	return 0;
@@ -441,7 +441,7 @@ static PyObject *Winmidi_New(PyObject *s
 	/* Open the MIDI output device. */
 	obj->m_midiOut = 0;
 	retVal = midiStreamOpen(&(obj->m_midiOut), &devNum, 1,
-		(DWORD) s_MidiCallback, (DWORD) obj, CALLBACK_FUNCTION); //lint !e620
+		(DWORD_PTR) s_MidiCallback, (DWORD_PTR) obj, CALLBACK_FUNCTION); //lint !e620
 	if(retVal != MMSYSERR_NOERROR) {
 	s_SetMidiError("opening a MIDI stream", retVal);
 	Py_DECREF(obj);
